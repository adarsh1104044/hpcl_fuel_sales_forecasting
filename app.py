import streamlit as st
import pandas as pd
from model import preprocess_single_fuel_excel, prepare_time_series, forecast_sales, plot_actual_vs_predicted
from agents import create_tasks, data_engineer, forecast_analyst, business_strategist
from crewai import Crew

st.set_page_config(page_title="HPCL Fuel Forecast", layout="wide")

def main():
    st.title("HPCL Fuel Sales Forecasting (Hybrid Agentic System)")

    st.write("Upload both PETROL and DIESEL Excel files (wide format, same outlets in each).")
    petrol_file = st.file_uploader("Upload Petrol Sales Excel File", type=["xlsx"], key="petrol")
    diesel_file = st.file_uploader("Upload Diesel Sales Excel File", type=["xlsx"], key="diesel")

    if petrol_file and diesel_file:
        # Preprocess both files
        melted_petrol = preprocess_single_fuel_excel(petrol_file, fuel_type='PET')
        melted_diesel = preprocess_single_fuel_excel(diesel_file, fuel_type='DSL')
        melted_df = pd.concat([melted_petrol, melted_diesel], ignore_index=True)
        st.write("Preprocessed Data Sample:")
        st.dataframe(melted_df.head())

        outlets = melted_df['Outlet'].unique()
        selected_outlet = st.selectbox("Select Outlet", outlets)
        fuel_type = st.radio("Select Fuel Type", ['PET', 'DSL'])
        periods = st.slider("Forecast Months", 1, 12, 6)

        if st.button("Run Hybrid Forecast"):
            filtered_df = melted_df[(melted_df['Outlet'] == selected_outlet) & (melted_df['Fuel_Type'] == fuel_type)]
            ts_data = filtered_df[['Month', 'Sales']].rename(columns={'Month': 'ds', 'Sales': 'y'}).dropna().sort_values('ds')
            if ts_data.empty:
                st.error("No data available for your selection.")
                return
            ts_data.to_csv('structured_data.csv', index=False)
            st.success("Data cleaned and saved as structured_data.csv")

            # Updated forecast function returns forecast, original data, and separated predictions
            forecast, original_data, historical_forecast, future_forecast = forecast_sales(ts_data, periods)
            forecast.to_csv('forecast_results.csv', index=False)
            st.success("Forecast completed and saved as forecast_results.csv")

            business_report = f"""
Forecast for Outlet {selected_outlet} ({fuel_type}) for next {periods} months:
{future_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].to_string(index=False)}

[Agentic business recommendations and strategies generated by CrewAI agents will appear here.]
"""
            with open('business_report.txt', 'w') as f:
                f.write(business_report)
            st.success("Business report generated and saved as business_report.txt")

            # Plot actual vs predicted
            st.subheader(f"Actual vs Predicted Sales for {selected_outlet} - {fuel_type}")
            fig = plot_actual_vs_predicted(original_data, forecast, historical_forecast, future_forecast, periods)
            st.pyplot(fig)
            
            st.subheader(f"Forecast for Outlet {selected_outlet} - {fuel_type}")
            st.line_chart(forecast.set_index('ds')[['yhat', 'yhat_lower', 'yhat_upper']])

            st.download_button("Download Cleaned Data", open('structured_data.csv', 'rb'), file_name="structured_data.csv")
            st.download_button("Download Forecast", open('forecast_results.csv', 'rb'), file_name="forecast_results.csv")
            st.download_button("Download Business Report", open('business_report.txt', 'rb'), file_name="business_report.txt")
    else:
        st.info("Please upload both PETROL and DIESEL Excel files to proceed.")

if __name__ == "__main__":
    main()

